<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>XML数据解析</title>
      <link href="/2018/07/03/XML%E6%95%B0%E6%8D%AE%E8%A7%A3%E6%9E%90/"/>
      <url>/2018/07/03/XML%E6%95%B0%E6%8D%AE%E8%A7%A3%E6%9E%90/</url>
      <content type="html"><![CDATA[<h4 id="上片文章中，我们对XML数据的格式有了一定的了解，那么我们要怎么对其进行解析呢？毕竟提取出来数据才是关键。首先我们需要下载XML解析工具：dom4j-jar，下载地址-密码：m5lv。"><a href="#上片文章中，我们对XML数据的格式有了一定的了解，那么我们要怎么对其进行解析呢？毕竟提取出来数据才是关键。首先我们需要下载XML解析工具：dom4j-jar，下载地址-密码：m5lv。" class="headerlink" title="　　上片文章中，我们对XML数据的格式有了一定的了解，那么我们要怎么对其进行解析呢？毕竟提取出来数据才是关键。首先我们需要下载XML解析工具：dom4j.jar，下载地址 密码：m5lv。"></a>　　上片文章中，我们对XML数据的格式有了一定的了解，那么我们要怎么对其进行解析呢？毕竟提取出来数据才是关键。首先我们需要下载XML解析工具：dom4j.jar，<a href="https://pan.baidu.com/s/1TeZALhCP0cvpal8XAV51KA" target="_blank" rel="noopener">下载地址</a> 密码：m5lv。</h4><h4 id="我们依然是用上篇文章中的那个例子"><a href="#我们依然是用上篇文章中的那个例子" class="headerlink" title="　　我们依然是用上篇文章中的那个例子"></a>　　我们依然是用上篇文章中的那个例子</h4><pre><code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&lt;!-- 根元素 --&gt;&lt;persons&gt;    &lt;person&gt;        &lt;name nn=&quot;li&quot;&gt;李明&lt;/name&gt;        &lt;age&gt;19&lt;/age&gt;        &lt;sex&gt;女&lt;/sex&gt;    &lt;/person&gt;    &lt;person&gt;        &lt;name nn=&quot;wang&quot;&gt;王华&lt;/name&gt;        &lt;age&gt;21&lt;/age&gt;        &lt;sex&gt;男&lt;/sex&gt;    &lt;/person&gt;    &lt;person&gt;        &lt;name nn=&quot;zhang&quot;&gt;张三&lt;/name&gt;        &lt;age&gt;21&lt;/age&gt;        &lt;sex&gt;男&lt;/sex&gt;    &lt;/person&gt;&lt;/persons&gt;  </code></pre><p>　　 </p><h4 id="首先当然是将包导入工程项目，因为我们是对XML数据进行解析，需要读取XML文件，因此我们定义XML文件读取对象："><a href="#首先当然是将包导入工程项目，因为我们是对XML数据进行解析，需要读取XML文件，因此我们定义XML文件读取对象：" class="headerlink" title="　　首先当然是将包导入工程项目，因为我们是对XML数据进行解析，需要读取XML文件，因此我们定义XML文件读取对象："></a>　　首先当然是将包导入工程项目，因为我们是对XML数据进行解析，需要读取XML文件，因此我们定义XML文件读取对象：</h4><blockquote><p><code>SAXReader reader = new SAXReader();</code>  </p></blockquote><h4 id="因为我们是将XML文件作为一个文档处理的，因此我们获取该文档的对象："><a href="#因为我们是将XML文件作为一个文档处理的，因此我们获取该文档的对象：" class="headerlink" title="　　因为我们是将XML文件作为一个文档处理的，因此我们获取该文档的对象："></a>　　因为我们是将XML文件作为一个文档处理的，因此我们获取该文档的对象：</h4><blockquote><p><code>Document document = reader.read(&quot;src/person.xml&quot;);</code>  </p></blockquote><h4 id="现在，我们的文档的对象就是document，我们可以对其数据进行处理了，获取其根节点元素："><a href="#现在，我们的文档的对象就是document，我们可以对其数据进行处理了，获取其根节点元素：" class="headerlink" title="　　现在，我们的文档的对象就是document，我们可以对其数据进行处理了，获取其根节点元素："></a>　　现在，我们的文档的对象就是document，我们可以对其数据进行处理了，获取其根节点元素：</h4><blockquote><p><code>Element root = document.getRootElement();</code>  </p></blockquote><h4 id="因为根节点下由多个子元素组成，如本文的XML所示，该根节点下有三个子person标签，我们想提取这些标签内的数据，则我们需要先获取到所有的这些节点元素："><a href="#因为根节点下由多个子元素组成，如本文的XML所示，该根节点下有三个子person标签，我们想提取这些标签内的数据，则我们需要先获取到所有的这些节点元素：" class="headerlink" title="　　因为根节点下由多个子元素组成，如本文的XML所示，该根节点下有三个子person标签，我们想提取这些标签内的数据，则我们需要先获取到所有的这些节点元素："></a>　　因为根节点下由多个子元素组成，如本文的XML所示，该根节点下有三个子person标签，我们想提取这些标签内的数据，则我们需要先获取到所有的这些节点元素：</h4><blockquote><p><code>List list=root.elements();</code>   </p></blockquote><h4 id="root-elements-的返回值就是persons标签下的所有一级子标签，我们将其放在list中。现在我们取到了我们想要的节点，接下来就该解"><a href="#root-elements-的返回值就是persons标签下的所有一级子标签，我们将其放在list中。现在我们取到了我们想要的节点，接下来就该解" class="headerlink" title="　　root.elements()的返回值就是persons标签下的所有一级子标签，我们将其放在list中。现在我们取到了我们想要的节点，接下来就该解"></a>　　root.elements()的返回值就是persons标签下的所有一级子标签，我们将其放在list中。现在我们取到了我们想要的节点，接下来就该解</h4><pre><code>for (Object object : list) {            Element e = (Element) object;            System.out.print(e.element(&quot;name&quot;).getText());            System.out.println(&quot;\t&quot;+e.element(&quot;name&quot;).attributeValue(&quot;nn&quot;).toString());}  </code></pre><p>　　  </p><h4 id="这里我们用for-each进行循环遍历，我们想要获取的是person标签下的数据，也就是name-age和sex，这里我只对name进行获取操作。根据代码我们可以看出，想要获取每个标签的元素这需要对该标签进行get操作即可，比如这里我们获取的是name，而name是person的子标签，因此我们直接用e来进行获取。e-element-“标签名称”-则代表获取该标签的对象，然后用getText进行数据的获取。"><a href="#这里我们用for-each进行循环遍历，我们想要获取的是person标签下的数据，也就是name-age和sex，这里我只对name进行获取操作。根据代码我们可以看出，想要获取每个标签的元素这需要对该标签进行get操作即可，比如这里我们获取的是name，而name是person的子标签，因此我们直接用e来进行获取。e-element-“标签名称”-则代表获取该标签的对象，然后用getText进行数据的获取。" class="headerlink" title="　　这里我们用for..each进行循环遍历，我们想要获取的是person标签下的数据，也就是name,age和sex，这里我只对name进行获取操作。根据代码我们可以看出，想要获取每个标签的元素这需要对该标签进行get操作即可，比如这里我们获取的是name，而name是person的子标签，因此我们直接用e来进行获取。e.element(“标签名称”)则代表获取该标签的对象，然后用getText进行数据的获取。"></a>　　这里我们用for..each进行循环遍历，我们想要获取的是person标签下的数据，也就是name,age和sex，这里我只对name进行获取操作。根据代码我们可以看出，想要获取每个标签的元素这需要对该标签进行get操作即可，比如这里我们获取的是name，而name是person的子标签，因此我们直接用e来进行获取。e.element(“标签名称”)则代表获取该标签的对象，然后用getText进行数据的获取。</h4><h4 id="那么如果我们想获取别名呢？这里我们采用的是attributeValue-“标识符”-方法，他是获取标签中定义的元素的数据，如attributeValue-“nn”-toString-就是获取我们的别名，nn替换为你的标识符。"><a href="#那么如果我们想获取别名呢？这里我们采用的是attributeValue-“标识符”-方法，他是获取标签中定义的元素的数据，如attributeValue-“nn”-toString-就是获取我们的别名，nn替换为你的标识符。" class="headerlink" title="　　那么如果我们想获取别名呢？这里我们采用的是attributeValue(“标识符”)方法，他是获取标签中定义的元素的数据，如attributeValue(“nn”).toString()就是获取我们的别名，nn替换为你的标识符。"></a>　　那么如果我们想获取别名呢？这里我们采用的是attributeValue(“标识符”)方法，他是获取标签中定义的元素的数据，如attributeValue(“nn”).toString()就是获取我们的别名，nn替换为你的标识符。</h4><h4 id="让我们来看一下结果："><a href="#让我们来看一下结果：" class="headerlink" title="　　让我们来看一下结果："></a>　　让我们来看一下结果：</h4><p><img src="http://pbc6vb3vc.bkt.clouddn.com/18-7-4/38103769.jpg" alt=""></p>]]></content>
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> xml </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>XML数据介绍</title>
      <link href="/2018/07/03/XML%E6%95%B0%E6%8D%AE%E4%BB%8B%E7%BB%8D/"/>
      <url>/2018/07/03/XML%E6%95%B0%E6%8D%AE%E4%BB%8B%E7%BB%8D/</url>
      <content type="html"><![CDATA[<p>　　最近接触到了XML解析的相关内容，所以对其进行了相关的了解和学习，本篇文章就是对XML数据格式进行简单介绍。  </p><p>　　  我们先来看一组XML数据。  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;!-- 根元素 --&gt;</span><br><span class="line">&lt;persons&gt;</span><br><span class="line">&lt;person&gt;</span><br><span class="line">&lt;name nn=&quot;li&quot;&gt;李明&lt;/name&gt;</span><br><span class="line">&lt;age&gt;19&lt;/age&gt;</span><br><span class="line">&lt;sex&gt;女&lt;/sex&gt;</span><br><span class="line">&lt;/person&gt;</span><br><span class="line">&lt;person&gt;</span><br><span class="line">&lt;name nn=&quot;wang&quot;&gt;王华&lt;/name&gt;</span><br><span class="line">&lt;age&gt;21&lt;/age&gt;</span><br><span class="line">&lt;sex&gt;男&lt;/sex&gt;</span><br><span class="line">&lt;/person&gt;</span><br><span class="line">&lt;person&gt;</span><br><span class="line">&lt;name nn=&quot;zhang&quot;&gt;张三&lt;/name&gt;</span><br><span class="line">&lt;age&gt;21&lt;/age&gt;</span><br><span class="line">&lt;sex&gt;男&lt;/sex&gt;</span><br><span class="line">&lt;/person&gt;</span><br><span class="line">&lt;/persons&gt;</span><br></pre></td></tr></table></figure><p>　　在这组数据中我们，头部的version代表XML的版本号，这个文档的版本号为1.0（貌似XML从出现开始就一直是这个版本）,encoding表示所用的编码，这里采用的是UTF-8。在头部的下方为数据部分。   </p><p>　　XML数据相对于其他语言来说，我们可以灵活的定义标签，并且标签是成对出现的，如果对应数据库的话，我们可以理解为每对标签随代表的是一行数据，而标签内容的子标签则是这行数据的每一列。当然，层次多的话这个形容就有点牵强了，但不影响理解是吧。   </p><p>　　 我们往往成最外层的标签为根，也就是ROOT，然后往内层去就是根的节点。在这个XML数据中，我们的根是persons，由命名可以看出，其保存的是人员的相关信息，这里persons可以理解为数据库里的一张表。而persons标签内的三组person标签所代表的则为persons表内的三行数据，每行数据内包含名称，年龄，性别等信息。    </p><p>　　其实XML数据理解了也就是这样，通过层层标签的嵌套来保存数据，就好像java中定义的类的不断嵌套一样。按照如此理解，不妨我们来写一个XML数据文件。  </p><p>　　我们在文件中保存两本书的信息，首先我们先建立根节点ROOT  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&lt;BOOKS&gt;</span><br><span class="line"> ...</span><br><span class="line">&lt;/BOOKS&gt;</span><br></pre></td></tr></table></figure><p>　　  </p><p>　　然后在根节点中添加书籍,因为书籍是图书集合的个体，因此，book为books的子节点。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&lt;BOOKS&gt;</span><br><span class="line"> 　＜book&gt;</span><br><span class="line"> 　&lt;/book&gt;</span><br><span class="line"> 　&lt;book&gt;</span><br><span class="line"> 　&lt;/book&gt;</span><br><span class="line">&lt;/BOOKS&gt;</span><br></pre></td></tr></table></figure></p><p>　　现在我们为每本书添加详细信息，如书名，作者等信息。因为这些信息是书籍的特征属性，因此应该作为book的子节点。  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">  </span><br><span class="line">&lt;BOOKS&gt;</span><br><span class="line"> 　　＜book&gt;</span><br><span class="line"> 　　　　&lt;name&gt;追风筝的人&lt;/name&gt;</span><br><span class="line"> 　　　　&lt;author&gt;卡勒德·胡塞尼&lt;/author&gt;</span><br><span class="line"> 　　&lt;/book&gt;</span><br><span class="line"> 　　&lt;book&gt;</span><br><span class="line"> 　　　　&lt;name&gt;空山&lt;/name&gt;</span><br><span class="line"> 　　　　&lt;author&gt;阿来&lt;/author&gt;</span><br><span class="line">　 　&lt;/book&gt;</span><br><span class="line"> &lt;/BOOKS&gt;</span><br></pre></td></tr></table></figure><p>　　这样我们的信息就保存好了，那么如果有附加信息呢，比如别称？比如，卡勒德·胡塞尼的别称为胡塞尼，我们怎么保存呢？看下面的代码：  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;BOOKS&gt;</span><br><span class="line">　　＜book&gt;</span><br><span class="line">　　　　&lt;name&gt;追风筝的人&lt;/name&gt;</span><br><span class="line">　　　　&lt;author nn=&quot;胡塞尼&quot;&gt;卡勒德·胡塞尼&lt;/author&gt;</span><br><span class="line">　　&lt;/book&gt;</span><br><span class="line">　　&lt;book&gt;</span><br><span class="line">　　　　&lt;name&gt;空山&lt;/name&gt;</span><br><span class="line">　　　　&lt;author&gt;阿来&lt;/author&gt;</span><br><span class="line">　　&lt;/book&gt;</span><br><span class="line">&lt;/BOOKS&gt;</span><br></pre></td></tr></table></figure><p>　　对的，就是这样，我们在对应的标签内添加新的标记，来保存并列的属性，我这里用的是nn，当然你可以随意设置。   </p><p> 　　这样看起来是不是很简单，欢迎留言。</p>]]></content>
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> xml </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>XML数据生成</title>
      <link href="/2018/07/03/XML%E6%95%B0%E6%8D%AE%E7%94%9F%E6%88%90/"/>
      <url>/2018/07/03/XML%E6%95%B0%E6%8D%AE%E7%94%9F%E6%88%90/</url>
      <content type="html"><![CDATA[]]></content>
      
      
    </entry>
    
    <entry>
      <title>关于hexo博客中JSimple主题相关配置的说明</title>
      <link href="/2018/06/10/%E5%85%B3%E4%BA%8Ehexo%E5%8D%9A%E5%AE%A2%E4%B8%ADJSimple%E4%B8%BB%E9%A2%98%E7%9B%B8%E5%85%B3%E9%85%8D%E7%BD%AE%E7%9A%84%E8%AF%B4%E6%98%8E/"/>
      <url>/2018/06/10/%E5%85%B3%E4%BA%8Ehexo%E5%8D%9A%E5%AE%A2%E4%B8%ADJSimple%E4%B8%BB%E9%A2%98%E7%9B%B8%E5%85%B3%E9%85%8D%E7%BD%AE%E7%9A%84%E8%AF%B4%E6%98%8E/</url>
      <content type="html"><![CDATA[<blockquote><h3 id="关于JSimple的说明"><a href="#关于JSimple的说明" class="headerlink" title="关于JSimple的说明"></a>关于JSimple的说明</h3><p>　　JSimple主题即为本博客所使用的主题，其作者为唐先森。下载地址：<a href="https://github.com/tangkunyin/hexo-theme-jsimple" target="_blank" rel="noopener">JSimple主题地址</a>，感谢唐先森的制作。</p><h3 id="关于本文章的说明"><a href="#关于本文章的说明" class="headerlink" title="关于本文章的说明"></a>关于本文章的说明</h3><p>　　其实吧，在作者的github（也就是上面的地址）中的README.zhCN.md文件中，已经对该主题的功能以及相关的配置进行了较为详细的说明，大家根据其教程进行相关配置就已经OK了，所以，本博客不将配置的操作流程作为主要内容，而是对于其中某些相关的细节部分，以及我们想要自定义修改时涉及的相关文件功能进行大概说明，以方便自定义操作。下面所说的所有内容都为我自行探索修改时所理解的，可能存在不正确和不全的地方，如有问题还请谅解。</p><h3 id="下面进入正题（以下内容为对主题中相关文件及文件夹的解释说明）"><a href="#下面进入正题（以下内容为对主题中相关文件及文件夹的解释说明）" class="headerlink" title="下面进入正题（以下内容为对主题中相关文件及文件夹的解释说明）"></a>下面进入正题（以下内容为对主题中相关文件及文件夹的解释说明）</h3><p>　　–blog\scaffolds\post.md   配置生成文章时的默认内容,即hexo n “xxx” 所产生页面内的内容，通常我们将较为固定的内容或者参数放进去<br>　　–blog\scaffolds\page.md   配置生成页面时的默认内容，即hexo new page “xxx” 时所产生页面目录下index.md文件内的默认内容<br>　　–themes\jsimple\layout 这是一个文件夹，主要是相关布局的控制<br>　　–\layout\archive.ejs    文章数量统计页面的控制，也就是左侧栏第二项的那个页面<br>　　–\layout\tags.ejs    标签统计页面的相关配置，也就是左侧栏第三项的标签统计页面<br>　　<br>　　    –layout\_partial  下面所列文件为该路径下文件<br>　　    　　–_post.ejs    控制页面上端的菜单栏，如最近、前端等等，默认为显示主题配置文件中menu中的全部项，进入该文件你会发现他是用一个for循环进行自动加载，若想自定义显示的话可再次进行代码更改<br>　　    　　–_comments.ejs    主要为内容为评论插件的控制，若想添加评论模块，则只需要将其代码引入到该文件。若是还想在文章中控制是否使用评论区，只需要在文章头部添加字段 comments： true/fales（选择其一）,然后再该文件中添加判断 if(page.comments) 将你的评论区代码块包裹其中就OK<br>　　    　　–layout.ejs    控制显示的赞赏码  如果要更改赞赏码可在此文件中更改，内容位于文件最下方，或者也可以直接将jsimple\soure\images文件夹下的赞赏码图片进行替换<br>　　    　　–footer.ejs    主要是文章页面下方默认显示内容的控制，主要描述网站的相关信息，也就是你看到的 “本站点采用只是共享。。。。” 的内容<br>　　    　　–head.ejs    主要为文章内上方显示时间等内容的相关控制，一般情况下不需要更改<br>　　    　　–leftMenu.ejs    主要是左侧导航栏的控制内容，如果想要添加新的导航项，在主题配置文件内leftPagesMenu:项下添加新的导航信息，包括名称，链接，图标，然后在此文件中a标签下继续添加<br>　　    　　–middleCover.ejs    主要控制左侧图片上显示的内容，在主题配置文件中进行变量定义及赋值，在此页面上进行格式控制和显示。想要显示更多内容只需要在此更改代码即可，HTML代码，相信你可以看得懂<br>　　    –layout\_widget 以下内容为该目录下文件<br>　　    　　–common-article.ejs    主要是浏览量信息控制，打赏图标等<br>　　    　　–user-entry.ejs    控件图标，如搜索框等<br>　　    –themes\jsimple\source\js 以下内容为该目录下文件<br>　　    　　–simpleCore.js        控制建站时间计算，赞赏图显示时间   搜索框等内容， 白日/黑夜的控制， 如果需要更改左侧图片，则在此文件中进行更改，位于changeReadModel函数中<br>　　–其他内容，基本都在主题配置文件中进行更改<br>　　–类别和标签的别名控制在站点配置文件中category_map: tag_map: 中进行配置<br>　　–其他未提到的文件都为逻辑控制内容，基本不需要改</p></blockquote><hr><p>　　技术这东西其实真的很简单，前提是当我们会的时候。很多时候他就想有一层窗户纸，捅破了就：哇，好简单。但是捅破之间，我们不知道要熬多少个日日夜夜，这篇博客希望能帮助大家。<br>　　如果存在什么问题，欢迎在下方留言。</p>]]></content>
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
            <tag> JSimple </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>技术资源专题</title>
      <link href="/2018/06/09/%E6%8A%80%E6%9C%AF%E8%B5%84%E6%BA%90%E4%B8%93%E9%A2%98/"/>
      <url>/2018/06/09/%E6%8A%80%E6%9C%AF%E8%B5%84%E6%BA%90%E4%B8%93%E9%A2%98/</url>
      <content type="html"><![CDATA[<h4 id="本帖主要分享一下技术中的相关资源"><a href="#本帖主要分享一下技术中的相关资源" class="headerlink" title="本帖主要分享一下技术中的相关资源"></a>本帖主要分享一下技术中的相关资源</h4>]]></content>
      
      <categories>
          
          <category> 资源 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 资源 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>hah</title>
      <link href="/2018/06/09/hah/"/>
      <url>/2018/06/09/hah/</url>
      <content type="html"><![CDATA[]]></content>
      
      <categories>
          
          <category> 生活 </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>this</title>
      <link href="/2018/06/09/this/"/>
      <url>/2018/06/09/this/</url>
      <content type="html"><![CDATA[]]></content>
      
      <categories>
          
          <category> 其他 </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>Hello World</title>
      <link href="/2018/06/09/hello-world/"/>
      <url>/2018/06/09/hello-world/</url>
      <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
    </entry>
    
  
  
</search>
